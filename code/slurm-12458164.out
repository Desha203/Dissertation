Defaulting to user installation because normal site-packages is not writeable
Looking in indexes: https://pypi.org/simple, https://pypi.ngc.nvidia.com
Requirement already satisfied: segmentation-models-3D in /user/home/rb21991/.local/lib/python3.12/site-packages (1.1.1)
Requirement already satisfied: keras==3.3.3 in /user/home/rb21991/.local/lib/python3.12/site-packages (from segmentation-models-3D) (3.3.3)
Requirement already satisfied: classification-models-3D==1.1.0 in /user/home/rb21991/.local/lib/python3.12/site-packages (from segmentation-models-3D) (1.1.0)
Requirement already satisfied: absl-py in /user/home/rb21991/.local/lib/python3.12/site-packages (from keras==3.3.3->segmentation-models-3D) (2.2.2)
Requirement already satisfied: numpy in /user/home/rb21991/.local/lib/python3.12/site-packages (from keras==3.3.3->segmentation-models-3D) (1.26.4)
Requirement already satisfied: rich in /user/home/rb21991/.local/lib/python3.12/site-packages (from keras==3.3.3->segmentation-models-3D) (14.0.0)
Requirement already satisfied: namex in /user/home/rb21991/.local/lib/python3.12/site-packages (from keras==3.3.3->segmentation-models-3D) (0.0.9)
Requirement already satisfied: h5py in /software/local/languages/miniforge3/envs/tensorflow/lib/python3.12/site-packages (from keras==3.3.3->segmentation-models-3D) (3.11.0)
Requirement already satisfied: optree in /user/home/rb21991/.local/lib/python3.12/site-packages (from keras==3.3.3->segmentation-models-3D) (0.15.0)
Requirement already satisfied: ml-dtypes in /user/home/rb21991/.local/lib/python3.12/site-packages (from keras==3.3.3->segmentation-models-3D) (0.5.1)
Requirement already satisfied: typing-extensions>=4.5.0 in /software/local/languages/miniforge3/envs/tensorflow/lib/python3.12/site-packages (from optree->keras==3.3.3->segmentation-models-3D) (4.12.2)
Requirement already satisfied: markdown-it-py>=2.2.0 in /user/home/rb21991/.local/lib/python3.12/site-packages (from rich->keras==3.3.3->segmentation-models-3D) (3.0.0)
Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /software/local/languages/miniforge3/envs/tensorflow/lib/python3.12/site-packages (from rich->keras==3.3.3->segmentation-models-3D) (2.18.0)
Requirement already satisfied: mdurl~=0.1 in /user/home/rb21991/.local/lib/python3.12/site-packages (from markdown-it-py>=2.2.0->rich->keras==3.3.3->segmentation-models-3D) (0.1.2)
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
I0000 00:00:1754649204.997709  366142 service.cc:145] XLA service 0x14bc9c006b20 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:
I0000 00:00:1754649205.010726  366142 service.cc:153]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0
I0000 00:00:1754649205.010757  366142 service.cc:153]   StreamExecutor device (1): Tesla P100-PCIE-16GB, Compute Capability 6.0
2025-08-08 11:33:34.775994: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng0{} for conv (f32[4,16,128,128,128]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[4,16,128,128,128]{4,3,2,1,0}, f32[16,16,3,3,3]{4,3,2,1,0}, f32[16]{0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBiasActivationForward", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kRelu","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
2025-08-08 11:33:35.279350: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 1.513793102s
Trying algorithm eng0{} for conv (f32[4,16,128,128,128]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[4,16,128,128,128]{4,3,2,1,0}, f32[16,16,3,3,3]{4,3,2,1,0}, f32[16]{0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBiasActivationForward", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kRelu","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
2025-08-08 11:33:39.086993: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng0{} for conv (f32[4,16,128,128,128]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[4,32,128,128,128]{4,3,2,1,0}, f32[16,32,3,3,3]{4,3,2,1,0}, f32[16]{0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBiasActivationForward", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kRelu","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
2025-08-08 11:33:41.101141: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 3.014570582s
Trying algorithm eng0{} for conv (f32[4,16,128,128,128]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[4,32,128,128,128]{4,3,2,1,0}, f32[16,32,3,3,3]{4,3,2,1,0}, f32[16]{0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBiasActivationForward", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kRelu","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
2025-08-08 11:33:50.371984: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng20{k2=6,k3=0} for conv (f32[16,1,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[4,1,128,128,128]{4,3,2,1,0}, f32[4,16,128,128,128]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBackwardFilter", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kNone","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
2025-08-08 11:33:50.395259: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 1.023866961s
Trying algorithm eng20{k2=6,k3=0} for conv (f32[16,1,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[4,1,128,128,128]{4,3,2,1,0}, f32[4,16,128,128,128]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBackwardFilter", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kNone","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
2025-08-08 11:33:53.412989: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng20{k2=6,k3=0} for conv (f32[16,16,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[4,16,128,128,128]{4,3,2,1,0}, f32[4,16,128,128,128]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBackwardFilter", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kNone","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
2025-08-08 11:33:53.425282: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 1.013313148s
Trying algorithm eng20{k2=6,k3=0} for conv (f32[16,16,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[4,16,128,128,128]{4,3,2,1,0}, f32[4,16,128,128,128]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBackwardFilter", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kNone","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
2025-08-08 11:33:54.425980: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng0{} for conv (f32[16,16,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[4,16,128,128,128]{4,3,2,1,0}, f32[4,16,128,128,128]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBackwardFilter", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kNone","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
2025-08-08 11:33:56.884995: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 3.459667004s
Trying algorithm eng0{} for conv (f32[16,16,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[4,16,128,128,128]{4,3,2,1,0}, f32[4,16,128,128,128]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBackwardFilter", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kNone","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
2025-08-08 11:33:59.822981: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng0{} for conv (f32[32,32,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[4,32,64,64,64]{4,3,2,1,0}, f32[4,32,64,64,64]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBackwardFilter", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kNone","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
2025-08-08 11:34:00.497385: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 1.674613844s
Trying algorithm eng0{} for conv (f32[32,32,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[4,32,64,64,64]{4,3,2,1,0}, f32[4,32,64,64,64]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBackwardFilter", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kNone","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
2025-08-08 11:34:07.786980: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng20{k2=6,k3=0} for conv (f32[16,32,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[4,32,128,128,128]{4,3,2,1,0}, f32[4,16,128,128,128]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBackwardFilter", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kNone","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
2025-08-08 11:34:07.922881: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 1.145190496s
Trying algorithm eng20{k2=6,k3=0} for conv (f32[16,32,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[4,32,128,128,128]{4,3,2,1,0}, f32[4,16,128,128,128]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBackwardFilter", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kNone","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
2025-08-08 11:34:08.930979: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng0{} for conv (f32[16,32,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[4,32,128,128,128]{4,3,2,1,0}, f32[4,16,128,128,128]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBackwardFilter", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kNone","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
2025-08-08 11:34:14.609159: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 6.686229454s
Trying algorithm eng0{} for conv (f32[16,32,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[4,32,128,128,128]{4,3,2,1,0}, f32[4,16,128,128,128]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBackwardFilter", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kNone","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
I0000 00:00:1754649262.191373  366142 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.
Num GPUs Available: 2
Warning: mask.npy not found for training patient UPENN-GBM-00013_11
Warning: mask.npy not found for training patient UPENN-GBM-00102_11
Warning: mask.npy not found for training patient UPENN-GBM-00106_11
Warning: mask.npy not found for training patient UPENN-GBM-00135_11
Warning: mask.npy not found for training patient UPENN-GBM-00174_11
Warning: mask.npy not found for training patient UPENN-GBM-00192_11
Warning: mask.npy not found for training patient UPENN-GBM-00201_11
Warning: mask.npy not found for training patient UPENN-GBM-00266_11
Warning: mask.npy not found for training patient UPENN-GBM-00290_11
Warning: mask.npy not found for training patient UPENN-GBM-00307_11
Warning: mask.npy not found for training patient UPENN-GBM-00380_11
Warning: mask.npy not found for validation patient UPENN-GBM-00115_11
Warning: mask.npy not found for validation patient UPENN-GBM-00275_11
Warning: mask.npy not found for validation patient UPENN-GBM-00393_11
Filtered 106 training patients and 11 validation patients.
Segmentation Models: using `keras` framework.
Training model with modalities: [2]
Images shape: (4, 128, 128, 128, 1)
Masks shape: (4, 128, 128, 128, 4)
[1m 1/26[0m [37m━━━━━━━━━━━━━━━━━━━━[0m [1m26:37[0m 64s/step - accuracy: 0.3552 - iou_score: 0.0113 - loss: 1.0332[1m 2/26[0m [32m━[0m[37m━━━━━━━━━━━━━━━━━━━[0m [1m31s[0m 1s/step - accuracy: 0.4943 - iou_score: 0.0361 - loss: 1.0265   [1m 3/26[0m [32m━━[0m[37m━━━━━━━━━━━━━━━━━━[0m [1m31s[0m 1s/step - accuracy: 0.5746 - iou_score: 0.0624 - loss: 1.0242[1m 4/26[0m [32m━━━[0m[37m━━━━━━━━━━━━━━━━━[0m [1m29s[0m 1s/step - accuracy: 0.6266 - iou_score: 0.0810 - loss: 1.0231[1m 5/26[0m [32m━━━[0m[37m━━━━━━━━━━━━━━━━━[0m [1m27s[0m 1s/step - accuracy: 0.6635 - iou_score: 0.0936 - loss: 1.0219[1m 6/26[0m [32m━━━━[0m[37m━━━━━━━━━━━━━━━━[0m [1m26s[0m 1s/step - accuracy: 0.6900 - iou_score: 0.1035 - loss: 1.0206[1m 7/26[0m [32m━━━━━[0m[37m━━━━━━━━━━━━━━━[0m [1m25s[0m 1s/step - accuracy: 0.7116 - iou_score: 0.1106 - loss: 1.0194[1m 8/26[0m [32m━━━━━━[0m[37m━━━━━━━━━━━━━━[0m [1m23s[0m 1s/step - accuracy: 0.7297 - iou_score: 0.1156 - loss: 1.0183[1m 9/26[0m [32m━━━━━━[0m[37m━━━━━━━━━━━━━━[0m [1m22s[0m 1s/step - accuracy: 0.7448 - iou_score: 0.1194 - loss: 1.0174[1m10/26[0m [32m━━━━━━━[0m[37m━━━━━━━━━━━━━[0m [1m21s[0m 1s/step - accuracy: 0.7573 - iou_score: 0.1232 - loss: 1.0165[1m11/26[0m [32m━━━━━━━━[0m[37m━━━━━━━━━━━━[0m [1m20s[0m 1s/step - accuracy: 0.7683 - iou_score: 0.1264 - loss: 1.0156[1m12/26[0m [32m━━━━━━━━━[0m[37m━━━━━━━━━━━[0m [1m19s[0m 1s/step - accuracy: 0.7780 - iou_score: 0.1294 - loss: 1.0147[1m13/26[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m18s[0m 1s/step - accuracy: 0.7867 - iou_score: 0.1323 - loss: 1.0139[1m14/26[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m16s[0m 1s/step - accuracy: 0.7946 - iou_score: 0.1351 - loss: 1.0131[1m15/26[0m [32m━━━━━━━━━━━[0m[37m━━━━━━━━━[0m [1m15s[0m 1s/step - accuracy: 0.8016 - iou_score: 0.1378 - loss: 1.0124[1m16/26[0m [32m━━━━━━━━━━━━[0m[37m━━━━━━━━[0m [1m13s[0m 1s/step - accuracy: 0.8080 - iou_score: 0.1403 - loss: 1.0116[1m17/26[0m [32m━━━━━━━━━━━━━[0m[37m━━━━━━━[0m [1m12s[0m 1s/step - accuracy: 0.8138 - iou_score: 0.1426 - loss: 1.0110[1m18/26[0m [32m━━━━━━━━━━━━━[0m[37m━━━━━━━[0m [1m11s[0m 1s/step - accuracy: 0.8191 - iou_score: 0.1447 - loss: 1.0103[1m19/26[0m [32m━━━━━━━━━━━━━━[0m[37m━━━━━━[0m [1m9s[0m 1s/step - accuracy: 0.8240 - iou_score: 0.1468 - loss: 1.0097 [1m20/26[0m [32m━━━━━━━━━━━━━━━[0m[37m━━━━━[0m [1m8s[0m 1s/step - accuracy: 0.8286 - iou_score: 0.1489 - loss: 1.0091[1m21/26[0m [32m━━━━━━━━━━━━━━━━[0m[37m━━━━[0m [1m6s[0m 1s/step - accuracy: 0.8328 - iou_score: 0.1508 - loss: 1.0085[1m22/26[0m [32m━━━━━━━━━━━━━━━━[0m[37m━━━━[0m [1m5s[0m 1s/step - accuracy: 0.8367 - iou_score: 0.1526 - loss: 1.0079[1m23/26[0m [32m━━━━━━━━━━━━━━━━━[0m[37m━━━[0m [1m4s[0m 1s/step - accuracy: 0.8404 - iou_score: 0.1544 - loss: 1.0073[1m24/26[0m [32m━━━━━━━━━━━━━━━━━━[0m[37m━━[0m [1m2s[0m 1s/step - accuracy: 0.8438 - iou_score: 0.1560 - loss: 1.0068[1m25/26[0m [32m━━━━━━━━━━━━━━━━━━━[0m[37m━[0m [1m1s[0m 1s/step - accuracy: 0.8470 - iou_score: 0.1576 - loss: 1.00622025-08-08 11:35:07.137987: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng0{} for conv (f32[2,16,128,128,128]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[2,32,128,128,128]{4,3,2,1,0}, f32[16,32,3,3,3]{4,3,2,1,0}, f32[16]{0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBiasActivationForward", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kRelu","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
2025-08-08 11:35:07.644461: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 1.508385326s
Trying algorithm eng0{} for conv (f32[2,16,128,128,128]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[2,32,128,128,128]{4,3,2,1,0}, f32[16,32,3,3,3]{4,3,2,1,0}, f32[16]{0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBiasActivationForward", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kRelu","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
2025-08-08 11:35:13.337981: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng20{k2=6,k3=0} for conv (f32[16,1,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[2,1,128,128,128]{4,3,2,1,0}, f32[2,16,128,128,128]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBackwardFilter", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kNone","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
2025-08-08 11:35:13.356499: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 1.01935976s
Trying algorithm eng20{k2=6,k3=0} for conv (f32[16,1,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[2,1,128,128,128]{4,3,2,1,0}, f32[2,16,128,128,128]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBackwardFilter", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kNone","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
2025-08-08 11:35:15.568979: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng20{k2=6,k3=0} for conv (f32[16,16,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[2,16,128,128,128]{4,3,2,1,0}, f32[2,16,128,128,128]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBackwardFilter", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kNone","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
2025-08-08 11:35:15.580570: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 1.012172987s
Trying algorithm eng20{k2=6,k3=0} for conv (f32[16,16,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[2,16,128,128,128]{4,3,2,1,0}, f32[2,16,128,128,128]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBackwardFilter", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kNone","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
2025-08-08 11:35:16.580978: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng0{} for conv (f32[16,16,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[2,16,128,128,128]{4,3,2,1,0}, f32[2,16,128,128,128]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBackwardFilter", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kNone","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
2025-08-08 11:35:17.310690: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 1.730081199s
Trying algorithm eng0{} for conv (f32[16,16,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[2,16,128,128,128]{4,3,2,1,0}, f32[2,16,128,128,128]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBackwardFilter", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kNone","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
2025-08-08 11:35:25.690985: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng20{k2=6,k3=0} for conv (f32[16,32,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[2,32,128,128,128]{4,3,2,1,0}, f32[2,16,128,128,128]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBackwardFilter", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kNone","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
2025-08-08 11:35:25.702699: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 1.012248901s
Trying algorithm eng20{k2=6,k3=0} for conv (f32[16,32,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[2,32,128,128,128]{4,3,2,1,0}, f32[2,16,128,128,128]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBackwardFilter", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kNone","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
2025-08-08 11:35:26.702979: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng0{} for conv (f32[16,32,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[2,32,128,128,128]{4,3,2,1,0}, f32[2,16,128,128,128]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBackwardFilter", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kNone","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
2025-08-08 11:35:29.046140: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 3.34335986s
Trying algorithm eng0{} for conv (f32[16,32,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[2,32,128,128,128]{4,3,2,1,0}, f32[2,16,128,128,128]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBackwardFilter", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kNone","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
[1m26/26[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 3s/step - accuracy: 0.8499 - iou_score: 0.1591 - loss: 1.0057[1m26/26[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m143s[0m 3s/step - accuracy: 0.8527 - iou_score: 0.1604 - loss: 1.0053 - val_accuracy: 0.9544 - val_iou_score: 0.1911 - val_loss: 0.9765

Training finished.
Best Epoch (val_loss): 1
Training Duration: 142.82 seconds
Finished training model with modalities: [2]
Training model with modalities: [3]
Images shape: (4, 128, 128, 128, 1)
Masks shape: (4, 128, 128, 128, 4)
[1m 1/26[0m [37m━━━━━━━━━━━━━━━━━━━━[0m [1m7:49[0m 19s/step - accuracy: 0.0124 - iou_score: 0.0043 - loss: 1.0593[1m 2/26[0m [32m━[0m[37m━━━━━━━━━━━━━━━━━━━[0m [1m30s[0m 1s/step - accuracy: 0.0805 - iou_score: 0.0041 - loss: 1.0529  [1m 3/26[0m [32m━━[0m[37m━━━━━━━━━━━━━━━━━━[0m [1m30s[0m 1s/step - accuracy: 0.1677 - iou_score: 0.0037 - loss: 1.0484[1m 4/26[0m [32m━━━[0m[37m━━━━━━━━━━━━━━━━━[0m [1m28s[0m 1s/step - accuracy: 0.2447 - iou_score: 0.0078 - loss: 1.0445[1m 5/26[0m [32m━━━[0m[37m━━━━━━━━━━━━━━━━━[0m [1m27s[0m 1s/step - accuracy: 0.3091 - iou_score: 0.0169 - loss: 1.0413[1m 6/26[0m [32m━━━━[0m[37m━━━━━━━━━━━━━━━━[0m [1m26s[0m 1s/step - accuracy: 0.3626 - iou_score: 0.0260 - loss: 1.0384[1m 7/26[0m [32m━━━━━[0m[37m━━━━━━━━━━━━━━━[0m [1m24s[0m 1s/step - accuracy: 0.4077 - iou_score: 0.0340 - loss: 1.0360[1m 8/26[0m [32m━━━━━━[0m[37m━━━━━━━━━━━━━━[0m [1m23s[0m 1s/step - accuracy: 0.4458 - iou_score: 0.0420 - loss: 1.0337[1m 9/26[0m [32m━━━━━━[0m[37m━━━━━━━━━━━━━━[0m [1m22s[0m 1s/step - accuracy: 0.4783 - iou_score: 0.0493 - loss: 1.0316[1m10/26[0m [32m━━━━━━━[0m[37m━━━━━━━━━━━━━[0m [1m20s[0m 1s/step - accuracy: 0.5065 - iou_score: 0.0562 - loss: 1.0298[1m11/26[0m [32m━━━━━━━━[0m[37m━━━━━━━━━━━━[0m [1m19s[0m 1s/step - accuracy: 0.5312 - iou_score: 0.0618 - loss: 1.0281[1m12/26[0m [32m━━━━━━━━━[0m[37m━━━━━━━━━━━[0m [1m18s[0m 1s/step - accuracy: 0.5532 - iou_score: 0.0669 - loss: 1.0266[1m13/26[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m16s[0m 1s/step - accuracy: 0.5727 - iou_score: 0.0719 - loss: 1.0252[1m14/26[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m15s[0m 1s/step - accuracy: 0.5902 - iou_score: 0.0767 - loss: 1.0239[1m15/26[0m [32m━━━━━━━━━━━[0m[37m━━━━━━━━━[0m [1m14s[0m 1s/step - accuracy: 0.6060 - iou_score: 0.0811 - loss: 1.0227[1m16/26[0m [32m━━━━━━━━━━━━[0m[37m━━━━━━━━[0m [1m13s[0m 1s/step - accuracy: 0.6203 - iou_score: 0.0851 - loss: 1.0216[1m17/26[0m [32m━━━━━━━━━━━━━[0m[37m━━━━━━━[0m [1m11s[0m 1s/step - accuracy: 0.6333 - iou_score: 0.0888 - loss: 1.0206[1m18/26[0m [32m━━━━━━━━━━━━━[0m[37m━━━━━━━[0m [1m10s[0m 1s/step - accuracy: 0.6452 - iou_score: 0.0923 - loss: 1.0196[1m19/26[0m [32m━━━━━━━━━━━━━━[0m[37m━━━━━━[0m [1m9s[0m 1s/step - accuracy: 0.6561 - iou_score: 0.0957 - loss: 1.0187 [1m20/26[0m [32m━━━━━━━━━━━━━━━[0m[37m━━━━━[0m [1m7s[0m 1s/step - accuracy: 0.6663 - iou_score: 0.0989 - loss: 1.0178[1m21/26[0m [32m━━━━━━━━━━━━━━━━[0m[37m━━━━[0m [1m6s[0m 1s/step - accuracy: 0.6757 - iou_score: 0.1020 - loss: 1.0170[1m22/26[0m [32m━━━━━━━━━━━━━━━━[0m[37m━━━━[0m [1m5s[0m 1s/step - accuracy: 0.6845 - iou_score: 0.1050 - loss: 1.0162[1m23/26[0m [32m━━━━━━━━━━━━━━━━━[0m[37m━━━[0m [1m3s[0m 1s/step - accuracy: 0.6926 - iou_score: 0.1078 - loss: 1.0154[1m24/26[0m [32m━━━━━━━━━━━━━━━━━━[0m[37m━━[0m [1m2s[0m 1s/step - accuracy: 0.7003 - iou_score: 0.1105 - loss: 1.0147[1m25/26[0m [32m━━━━━━━━━━━━━━━━━━━[0m[37m━[0m [1m1s[0m 1s/step - accuracy: 0.7074 - iou_score: 0.1131 - loss: 1.0139[1m26/26[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 2s/step - accuracy: 0.7141 - iou_score: 0.1155 - loss: 1.0133[1m26/26[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m68s[0m 2s/step - accuracy: 0.7202 - iou_score: 0.1177 - loss: 1.0126 - val_accuracy: 0.9542 - val_iou_score: 0.1160 - val_loss: 0.9895
2025-08-08 11:37:10.465987: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng20{k2=6,k3=0} for conv (f32[16,2,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[4,2,128,128,128]{4,3,2,1,0}, f32[4,16,128,128,128]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBackwardFilter", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kNone","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
2025-08-08 11:37:10.475932: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 1.015177573s
Trying algorithm eng20{k2=6,k3=0} for conv (f32[16,2,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[4,2,128,128,128]{4,3,2,1,0}, f32[4,16,128,128,128]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBackwardFilter", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kNone","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...

Training finished.
Best Epoch (val_loss): 1
Training Duration: 68.40 seconds
Finished training model with modalities: [3]
Training model with modalities: [1, 2]
Images shape: (4, 128, 128, 128, 2)
Masks shape: (4, 128, 128, 128, 4)
[1m 1/26[0m [37m━━━━━━━━━━━━━━━━━━━━[0m [1m9:23[0m 23s/step - accuracy: 0.0610 - iou_score: 0.0052 - loss: 1.0416[1m 2/26[0m [32m━[0m[37m━━━━━━━━━━━━━━━━━━━[0m [1m31s[0m 1s/step - accuracy: 0.1773 - iou_score: 0.0042 - loss: 1.0382  [1m 3/26[0m [32m━━[0m[37m━━━━━━━━━━━━━━━━━━[0m [1m31s[0m 1s/step - accuracy: 0.2696 - iou_score: 0.0158 - loss: 1.0337[1m 4/26[0m [32m━━━[0m[37m━━━━━━━━━━━━━━━━━[0m [1m35s[0m 2s/step - accuracy: 0.3434 - iou_score: 0.0334 - loss: 1.0319[1m 5/26[0m [32m━━━[0m[37m━━━━━━━━━━━━━━━━━[0m [1m33s[0m 2s/step - accuracy: 0.4031 - iou_score: 0.0497 - loss: 1.0305[1m 6/26[0m [32m━━━━[0m[37m━━━━━━━━━━━━━━━━[0m [1m31s[0m 2s/step - accuracy: 0.4517 - iou_score: 0.0630 - loss: 1.0290[1m 7/26[0m [32m━━━━━[0m[37m━━━━━━━━━━━━━━━[0m [1m29s[0m 2s/step - accuracy: 0.4919 - iou_score: 0.0735 - loss: 1.0273[1m 8/26[0m [32m━━━━━━[0m[37m━━━━━━━━━━━━━━[0m [1m27s[0m 2s/step - accuracy: 0.5257 - iou_score: 0.0815 - loss: 1.0258[1m 9/26[0m [32m━━━━━━[0m[37m━━━━━━━━━━━━━━[0m [1m26s[0m 2s/step - accuracy: 0.5543 - iou_score: 0.0877 - loss: 1.0244[1m10/26[0m [32m━━━━━━━[0m[37m━━━━━━━━━━━━━[0m [1m24s[0m 2s/step - accuracy: 0.5789 - iou_score: 0.0932 - loss: 1.0230[1m11/26[0m [32m━━━━━━━━[0m[37m━━━━━━━━━━━━[0m [1m23s[0m 2s/step - accuracy: 0.6005 - iou_score: 0.0985 - loss: 1.0218[1m12/26[0m [32m━━━━━━━━━[0m[37m━━━━━━━━━━━[0m [1m21s[0m 2s/step - accuracy: 0.6195 - iou_score: 0.1033 - loss: 1.0206[1m13/26[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m20s[0m 2s/step - accuracy: 0.6364 - iou_score: 0.1077 - loss: 1.0195[1m14/26[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m18s[0m 2s/step - accuracy: 0.6515 - iou_score: 0.1117 - loss: 1.0184[1m15/26[0m [32m━━━━━━━━━━━[0m[37m━━━━━━━━━[0m [1m17s[0m 2s/step - accuracy: 0.6651 - iou_score: 0.1155 - loss: 1.0173[1m16/26[0m [32m━━━━━━━━━━━━[0m[37m━━━━━━━━[0m [1m15s[0m 2s/step - accuracy: 0.6773 - iou_score: 0.1190 - loss: 1.0164[1m17/26[0m [32m━━━━━━━━━━━━━[0m[37m━━━━━━━[0m [1m13s[0m 2s/step - accuracy: 0.6884 - iou_score: 0.1224 - loss: 1.0154[1m18/26[0m [32m━━━━━━━━━━━━━[0m[37m━━━━━━━[0m [1m12s[0m 2s/step - accuracy: 0.6986 - iou_score: 0.1255 - loss: 1.0145[1m19/26[0m [32m━━━━━━━━━━━━━━[0m[37m━━━━━━[0m [1m10s[0m 2s/step - accuracy: 0.7080 - iou_score: 0.1285 - loss: 1.0136[1m20/26[0m [32m━━━━━━━━━━━━━━━[0m[37m━━━━━[0m [1m9s[0m 2s/step - accuracy: 0.7167 - iou_score: 0.1313 - loss: 1.0128 [1m21/26[0m [32m━━━━━━━━━━━━━━━━[0m[37m━━━━[0m [1m7s[0m 2s/step - accuracy: 0.7247 - iou_score: 0.1340 - loss: 1.0120[1m22/26[0m [32m━━━━━━━━━━━━━━━━[0m[37m━━━━[0m [1m6s[0m 2s/step - accuracy: 0.7321 - iou_score: 0.1365 - loss: 1.0112[1m23/26[0m [32m━━━━━━━━━━━━━━━━━[0m[37m━━━[0m [1m4s[0m 2s/step - accuracy: 0.7390 - iou_score: 0.1389 - loss: 1.0104[1m24/26[0m [32m━━━━━━━━━━━━━━━━━━[0m[37m━━[0m [1m3s[0m 2s/step - accuracy: 0.7455 - iou_score: 0.1412 - loss: 1.0097[1m25/26[0m [32m━━━━━━━━━━━━━━━━━━━[0m[37m━[0m [1m1s[0m 2s/step - accuracy: 0.7515 - iou_score: 0.1434 - loss: 1.00902025-08-08 11:38:05.087033: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng20{k2=6,k3=0} for conv (f32[16,2,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[2,2,128,128,128]{4,3,2,1,0}, f32[2,16,128,128,128]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBackwardFilter", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kNone","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
2025-08-08 11:38:05.099150: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 1.012324123s
Trying algorithm eng20{k2=6,k3=0} for conv (f32[16,2,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[2,2,128,128,128]{4,3,2,1,0}, f32[2,16,128,128,128]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBackwardFilter", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kNone","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
[1m26/26[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 2s/step - accuracy: 0.7572 - iou_score: 0.1455 - loss: 1.0083[1m26/26[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m82s[0m 2s/step - accuracy: 0.7624 - iou_score: 0.1474 - loss: 1.0077 - val_accuracy: 0.9544 - val_iou_score: 0.2215 - val_loss: 0.9717

Training finished.
Best Epoch (val_loss): 1
Training Duration: 82.01 seconds
Finished training model with modalities: [1, 2]
Training model with modalities: [2, 3]
Images shape: (4, 128, 128, 128, 2)
Masks shape: (4, 128, 128, 128, 4)
[1m 1/26[0m [37m━━━━━━━━━━━━━━━━━━━━[0m [1m7:54[0m 19s/step - accuracy: 0.3946 - iou_score: 1.3266e-10 - loss: 1.0331[1m 2/26[0m [32m━[0m[37m━━━━━━━━━━━━━━━━━━━[0m [1m32s[0m 1s/step - accuracy: 0.4800 - iou_score: 2.5832e-04 - loss: 1.0302  [1m 3/26[0m [32m━━[0m[37m━━━━━━━━━━━━━━━━━━[0m [1m31s[0m 1s/step - accuracy: 0.5378 - iou_score: 0.0239 - loss: 1.0325    [1m 4/26[0m [32m━━━[0m[37m━━━━━━━━━━━━━━━━━[0m [1m29s[0m 1s/step - accuracy: 0.5844 - iou_score: 0.0436 - loss: 1.0316[1m 5/26[0m [32m━━━[0m[37m━━━━━━━━━━━━━━━━━[0m [1m28s[0m 1s/step - accuracy: 0.6215 - iou_score: 0.0554 - loss: 1.0301[1m 6/26[0m [32m━━━━[0m[37m━━━━━━━━━━━━━━━━[0m [1m28s[0m 1s/step - accuracy: 0.6515 - iou_score: 0.0629 - loss: 1.0285[1m 7/26[0m [32m━━━━━[0m[37m━━━━━━━━━━━━━━━[0m [1m26s[0m 1s/step - accuracy: 0.6763 - iou_score: 0.0692 - loss: 1.0269[1m 8/26[0m [32m━━━━━━[0m[37m━━━━━━━━━━━━━━[0m [1m25s[0m 1s/step - accuracy: 0.6970 - iou_score: 0.0753 - loss: 1.0253[1m 9/26[0m [32m━━━━━━[0m[37m━━━━━━━━━━━━━━[0m [1m23s[0m 1s/step - accuracy: 0.7145 - iou_score: 0.0813 - loss: 1.0239[1m10/26[0m [32m━━━━━━━[0m[37m━━━━━━━━━━━━━[0m [1m22s[0m 1s/step - accuracy: 0.7295 - iou_score: 0.0871 - loss: 1.0225[1m11/26[0m [32m━━━━━━━━[0m[37m━━━━━━━━━━━━[0m [1m20s[0m 1s/step - accuracy: 0.7427 - iou_score: 0.0926 - loss: 1.0211[1m12/26[0m [32m━━━━━━━━━[0m[37m━━━━━━━━━━━[0m [1m19s[0m 1s/step - accuracy: 0.7543 - iou_score: 0.0978 - loss: 1.0198[1m13/26[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m18s[0m 1s/step - accuracy: 0.7646 - iou_score: 0.1027 - loss: 1.0185[1m14/26[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m16s[0m 1s/step - accuracy: 0.7738 - iou_score: 0.1073 - loss: 1.0172[1m15/26[0m [32m━━━━━━━━━━━[0m[37m━━━━━━━━━[0m [1m15s[0m 1s/step - accuracy: 0.7821 - iou_score: 0.1117 - loss: 1.0160[1m16/26[0m [32m━━━━━━━━━━━━[0m[37m━━━━━━━━[0m [1m14s[0m 1s/step - accuracy: 0.7896 - iou_score: 0.1157 - loss: 1.0149[1m17/26[0m [32m━━━━━━━━━━━━━[0m[37m━━━━━━━[0m [1m13s[0m 1s/step - accuracy: 0.7963 - iou_score: 0.1194 - loss: 1.0138[1m18/26[0m [32m━━━━━━━━━━━━━[0m[37m━━━━━━━[0m [1m11s[0m 1s/step - accuracy: 0.8025 - iou_score: 0.1228 - loss: 1.0127[1m19/26[0m [32m━━━━━━━━━━━━━━[0m[37m━━━━━━[0m [1m10s[0m 1s/step - accuracy: 0.8082 - iou_score: 0.1261 - loss: 1.0116[1m20/26[0m [32m━━━━━━━━━━━━━━━[0m[37m━━━━━[0m [1m8s[0m 1s/step - accuracy: 0.8134 - iou_score: 0.1292 - loss: 1.0106 [1m21/26[0m [32m━━━━━━━━━━━━━━━━[0m[37m━━━━[0m [1m7s[0m 1s/step - accuracy: 0.8183 - iou_score: 0.1321 - loss: 1.0097[1m22/26[0m [32m━━━━━━━━━━━━━━━━[0m[37m━━━━[0m [1m5s[0m 1s/step - accuracy: 0.8228 - iou_score: 0.1348 - loss: 1.0087[1m23/26[0m [32m━━━━━━━━━━━━━━━━━[0m[37m━━━[0m [1m4s[0m 1s/step - accuracy: 0.8270 - iou_score: 0.1374 - loss: 1.0079[1m24/26[0m [32m━━━━━━━━━━━━━━━━━━[0m[37m━━[0m [1m2s[0m 1s/step - accuracy: 0.8309 - iou_score: 0.1398 - loss: 1.0070[1m25/26[0m [32m━━━━━━━━━━━━━━━━━━━[0m[37m━[0m [1m1s[0m 1s/step - accuracy: 0.8345 - iou_score: 0.1421 - loss: 1.0062[1m26/26[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 2s/step - accuracy: 0.8379 - iou_score: 0.1443 - loss: 1.0054[1m26/26[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m73s[0m 2s/step - accuracy: 0.8411 - iou_score: 0.1463 - loss: 1.0047 - val_accuracy: 0.9544 - val_iou_score: 0.1829 - val_loss: 0.9761
2025-08-08 11:39:51.380986: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng20{k2=6,k3=0} for conv (f32[16,3,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[4,3,128,128,128]{4,3,2,1,0}, f32[4,16,128,128,128]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBackwardFilter", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kNone","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
2025-08-08 11:39:51.393761: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 1.013203749s
Trying algorithm eng20{k2=6,k3=0} for conv (f32[16,3,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[4,3,128,128,128]{4,3,2,1,0}, f32[4,16,128,128,128]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBackwardFilter", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kNone","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...

Training finished.
Best Epoch (val_loss): 1
Training Duration: 72.92 seconds
Finished training model with modalities: [2, 3]
Training model with modalities: [1, 2, 3]
Images shape: (4, 128, 128, 128, 3)
Masks shape: (4, 128, 128, 128, 4)
[1m 1/26[0m [37m━━━━━━━━━━━━━━━━━━━━[0m [1m9:33[0m 23s/step - accuracy: 0.1836 - iou_score: 1.2581e-04 - loss: 1.0399[1m 2/26[0m [32m━[0m[37m━━━━━━━━━━━━━━━━━━━[0m [1m32s[0m 1s/step - accuracy: 0.3514 - iou_score: 0.0019 - loss: 1.0347      [1m 3/26[0m [32m━━[0m[37m━━━━━━━━━━━━━━━━━━[0m [1m38s[0m 2s/step - accuracy: 0.4527 - iou_score: 0.0138 - loss: 1.0305[1m 4/26[0m [32m━━━[0m[37m━━━━━━━━━━━━━━━━━[0m [1m35s[0m 2s/step - accuracy: 0.5204 - iou_score: 0.0266 - loss: 1.0274[1m 5/26[0m [32m━━━[0m[37m━━━━━━━━━━━━━━━━━[0m [1m34s[0m 2s/step - accuracy: 0.5700 - iou_score: 0.0407 - loss: 1.0255[1m 6/26[0m [32m━━━━[0m[37m━━━━━━━━━━━━━━━━[0m [1m33s[0m 2s/step - accuracy: 0.6082 - iou_score: 0.0527 - loss: 1.0238[1m 7/26[0m [32m━━━━━[0m[37m━━━━━━━━━━━━━━━[0m [1m31s[0m 2s/step - accuracy: 0.6388 - iou_score: 0.0620 - loss: 1.0223[1m 8/26[0m [32m━━━━━━[0m[37m━━━━━━━━━━━━━━[0m [1m28s[0m 2s/step - accuracy: 0.6638 - iou_score: 0.0694 - loss: 1.0209[1m 9/26[0m [32m━━━━━━[0m[37m━━━━━━━━━━━━━━[0m [1m26s[0m 2s/step - accuracy: 0.6842 - iou_score: 0.0762 - loss: 1.0198[1m10/26[0m [32m━━━━━━━[0m[37m━━━━━━━━━━━━━[0m [1m26s[0m 2s/step - accuracy: 0.7016 - iou_score: 0.0822 - loss: 1.0187[1m11/26[0m [32m━━━━━━━━[0m[37m━━━━━━━━━━━━[0m [1m25s[0m 2s/step - accuracy: 0.7167 - iou_score: 0.0876 - loss: 1.0176[1m12/26[0m [32m━━━━━━━━━[0m[37m━━━━━━━━━━━[0m [1m23s[0m 2s/step - accuracy: 0.7300 - iou_score: 0.0929 - loss: 1.0166[1m13/26[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m21s[0m 2s/step - accuracy: 0.7417 - iou_score: 0.0977 - loss: 1.0157[1m14/26[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m19s[0m 2s/step - accuracy: 0.7521 - iou_score: 0.1022 - loss: 1.0148[1m15/26[0m [32m━━━━━━━━━━━[0m[37m━━━━━━━━━[0m [1m18s[0m 2s/step - accuracy: 0.7615 - iou_score: 0.1064 - loss: 1.0140[1m16/26[0m [32m━━━━━━━━━━━━[0m[37m━━━━━━━━[0m [1m16s[0m 2s/step - accuracy: 0.7699 - iou_score: 0.1103 - loss: 1.0132[1m17/26[0m [32m━━━━━━━━━━━━━[0m[37m━━━━━━━[0m [1m15s[0m 2s/step - accuracy: 0.7775 - iou_score: 0.1139 - loss: 1.0125[1m18/26[0m [32m━━━━━━━━━━━━━[0m[37m━━━━━━━[0m [1m13s[0m 2s/step - accuracy: 0.7844 - iou_score: 0.1170 - loss: 1.0118[1m19/26[0m [32m━━━━━━━━━━━━━━[0m[37m━━━━━━[0m [1m11s[0m 2s/step - accuracy: 0.7908 - iou_score: 0.1199 - loss: 1.0112[1m20/26[0m [32m━━━━━━━━━━━━━━━[0m[37m━━━━━[0m [1m10s[0m 2s/step - accuracy: 0.7967 - iou_score: 0.1226 - loss: 1.0106[1m21/26[0m [32m━━━━━━━━━━━━━━━━[0m[37m━━━━[0m [1m8s[0m 2s/step - accuracy: 0.8021 - iou_score: 0.1252 - loss: 1.0101 [1m22/26[0m [32m━━━━━━━━━━━━━━━━[0m[37m━━━━[0m [1m6s[0m 2s/step - accuracy: 0.8072 - iou_score: 0.1277 - loss: 1.0096[1m23/26[0m [32m━━━━━━━━━━━━━━━━━[0m[37m━━━[0m [1m5s[0m 2s/step - accuracy: 0.8118 - iou_score: 0.1301 - loss: 1.0092[1m24/26[0m [32m━━━━━━━━━━━━━━━━━━[0m[37m━━[0m [1m3s[0m 2s/step - accuracy: 0.8162 - iou_score: 0.1324 - loss: 1.0087[1m25/26[0m [32m━━━━━━━━━━━━━━━━━━━[0m[37m━[0m [1m1s[0m 2s/step - accuracy: 0.8203 - iou_score: 0.1345 - loss: 1.00832025-08-08 11:40:49.628985: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng20{k2=6,k3=0} for conv (f32[16,3,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[2,3,128,128,128]{4,3,2,1,0}, f32[2,16,128,128,128]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBackwardFilter", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kNone","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
2025-08-08 11:40:49.640670: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 1.012520471s
Trying algorithm eng20{k2=6,k3=0} for conv (f32[16,3,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[2,3,128,128,128]{4,3,2,1,0}, f32[2,16,128,128,128]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBackwardFilter", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kNone","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
[1m26/26[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 2s/step - accuracy: 0.8241 - iou_score: 0.1366 - loss: 1.0079WARNING:tensorflow:5 out of the last 9 calls to <function TensorFlowTrainer.make_test_function.<locals>.one_step_on_iterator at 0x14b800d27b00> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
[1m26/26[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m86s[0m 3s/step - accuracy: 0.8276 - iou_score: 0.1385 - loss: 1.0075 - val_accuracy: 0.9543 - val_iou_score: 0.2323 - val_loss: 0.9792

Training finished.
Best Epoch (val_loss): 1
Training Duration: 86.95 seconds
Finished training model with modalities: [1, 2, 3]
Training model with modalities: [0, 1, 2]
Images shape: (4, 128, 128, 128, 3)
Masks shape: (4, 128, 128, 128, 4)
[1m 1/26[0m [37m━━━━━━━━━━━━━━━━━━━━[0m [1m7:56[0m 19s/step - accuracy: 0.4699 - iou_score: 1.1893e-04 - loss: 1.0293[1m 2/26[0m [32m━[0m[37m━━━━━━━━━━━━━━━━━━━[0m [1m32s[0m 1s/step - accuracy: 0.5902 - iou_score: 0.0575 - loss: 1.0235      [1m 3/26[0m [32m━━[0m[37m━━━━━━━━━━━━━━━━━━[0m [1m39s[0m 2s/step - accuracy: 0.6559 - iou_score: 0.0794 - loss: 1.0196[1m 4/26[0m [32m━━━[0m[37m━━━━━━━━━━━━━━━━━[0m [1m37s[0m 2s/step - accuracy: 0.6985 - iou_score: 0.0922 - loss: 1.0170[1m 5/26[0m [32m━━━[0m[37m━━━━━━━━━━━━━━━━━[0m [1m36s[0m 2s/step - accuracy: 0.7291 - iou_score: 0.1013 - loss: 1.0148[1m 6/26[0m [32m━━━━[0m[37m━━━━━━━━━━━━━━━━[0m [1m35s[0m 2s/step - accuracy: 0.7521 - iou_score: 0.1097 - loss: 1.0132[1m 7/26[0m [32m━━━━━[0m[37m━━━━━━━━━━━━━━━[0m [1m33s[0m 2s/step - accuracy: 0.7706 - iou_score: 0.1157 - loss: 1.0117[1m 8/26[0m [32m━━━━━━[0m[37m━━━━━━━━━━━━━━[0m [1m31s[0m 2s/step - accuracy: 0.7856 - iou_score: 0.1201 - loss: 1.0105[1m 9/26[0m [32m━━━━━━[0m[37m━━━━━━━━━━━━━━[0m [1m29s[0m 2s/step - accuracy: 0.7981 - iou_score: 0.1237 - loss: 1.0095[1m10/26[0m [32m━━━━━━━[0m[37m━━━━━━━━━━━━━[0m [1m27s[0m 2s/step - accuracy: 0.8087 - iou_score: 0.1273 - loss: 1.0085[1m11/26[0m [32m━━━━━━━━[0m[37m━━━━━━━━━━━━[0m [1m25s[0m 2s/step - accuracy: 0.8179 - iou_score: 0.1308 - loss: 1.0076[1m12/26[0m [32m━━━━━━━━━[0m[37m━━━━━━━━━━━[0m [1m23s[0m 2s/step - accuracy: 0.8259 - iou_score: 0.1342 - loss: 1.0066[1m13/26[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m22s[0m 2s/step - accuracy: 0.8330 - iou_score: 0.1373 - loss: 1.0057[1m14/26[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m20s[0m 2s/step - accuracy: 0.8394 - iou_score: 0.1404 - loss: 1.0049[1m15/26[0m [32m━━━━━━━━━━━[0m[37m━━━━━━━━━[0m [1m18s[0m 2s/step - accuracy: 0.8450 - iou_score: 0.1433 - loss: 1.0041[1m16/26[0m [32m━━━━━━━━━━━━[0m[37m━━━━━━━━[0m [1m16s[0m 2s/step - accuracy: 0.8500 - iou_score: 0.1460 - loss: 1.0033[1m17/26[0m [32m━━━━━━━━━━━━━[0m[37m━━━━━━━[0m [1m15s[0m 2s/step - accuracy: 0.8546 - iou_score: 0.1486 - loss: 1.0024[1m18/26[0m [32m━━━━━━━━━━━━━[0m[37m━━━━━━━[0m [1m13s[0m 2s/step - accuracy: 0.8587 - iou_score: 0.1511 - loss: 1.0017[1m19/26[0m [32m━━━━━━━━━━━━━━[0m[37m━━━━━━[0m [1m11s[0m 2s/step - accuracy: 0.8625 - iou_score: 0.1534 - loss: 1.0009[1m20/26[0m [32m━━━━━━━━━━━━━━━[0m[37m━━━━━[0m [1m9s[0m 2s/step - accuracy: 0.8660 - iou_score: 0.1556 - loss: 1.0002 [1m21/26[0m [32m━━━━━━━━━━━━━━━━[0m[37m━━━━[0m [1m8s[0m 2s/step - accuracy: 0.8693 - iou_score: 0.1577 - loss: 0.9995[1m22/26[0m [32m━━━━━━━━━━━━━━━━[0m[37m━━━━[0m [1m6s[0m 2s/step - accuracy: 0.8723 - iou_score: 0.1597 - loss: 0.9988[1m23/26[0m [32m━━━━━━━━━━━━━━━━━[0m[37m━━━[0m [1m4s[0m 2s/step - accuracy: 0.8750 - iou_score: 0.1616 - loss: 0.9981[1m24/26[0m [32m━━━━━━━━━━━━━━━━━━[0m[37m━━[0m [1m3s[0m 2s/step - accuracy: 0.8776 - iou_score: 0.1634 - loss: 0.9974[1m25/26[0m [32m━━━━━━━━━━━━━━━━━━━[0m[37m━[0m [1m1s[0m 2s/step - accuracy: 0.8800 - iou_score: 0.1651 - loss: 0.9967[1m26/26[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 2s/step - accuracy: 0.8823 - iou_score: 0.1667 - loss: 0.9961WARNING:tensorflow:6 out of the last 11 calls to <function TensorFlowTrainer.make_test_function.<locals>.one_step_on_iterator at 0x14b80076ca40> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
[1m26/26[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m78s[0m 2s/step - accuracy: 0.8843 - iou_score: 0.1683 - loss: 0.9955 - val_accuracy: 0.9543 - val_iou_score: 0.2342 - val_loss: 0.9602

Training finished.
Best Epoch (val_loss): 1
Training Duration: 78.68 seconds
Finished training model with modalities: [0, 1, 2]
Training model with modalities: [0, 2, 3]
Images shape: (4, 128, 128, 128, 3)
Masks shape: (4, 128, 128, 128, 4)
[1m 1/26[0m [37m━━━━━━━━━━━━━━━━━━━━[0m [1m7:49[0m 19s/step - accuracy: 0.5892 - iou_score: 0.0177 - loss: 1.0200[1m 2/26[0m [32m━[0m[37m━━━━━━━━━━━━━━━━━━━[0m [1m32s[0m 1s/step - accuracy: 0.6750 - iou_score: 0.0717 - loss: 1.0189  [1m 3/26[0m [32m━━[0m[37m━━━━━━━━━━━━━━━━━━[0m [1m33s[0m 1s/step - accuracy: 0.7249 - iou_score: 0.1001 - loss: 1.0178[1m 4/26[0m [32m━━━[0m[37m━━━━━━━━━━━━━━━━━[0m [1m31s[0m 1s/step - accuracy: 0.7574 - iou_score: 0.1151 - loss: 1.0167[1m 5/26[0m [32m━━━[0m[37m━━━━━━━━━━━━━━━━━[0m [1m30s[0m 1s/step - accuracy: 0.7809 - iou_score: 0.1240 - loss: 1.0155[1m 6/26[0m [32m━━━━[0m[37m━━━━━━━━━━━━━━━━[0m [1m29s[0m 1s/step - accuracy: 0.7990 - iou_score: 0.1297 - loss: 1.0144[1m 7/26[0m [32m━━━━━[0m[37m━━━━━━━━━━━━━━━[0m [1m28s[0m 1s/step - accuracy: 0.8134 - iou_score: 0.1337 - loss: 1.0134[1m 8/26[0m [32m━━━━━━[0m[37m━━━━━━━━━━━━━━[0m [1m26s[0m 1s/step - accuracy: 0.8252 - iou_score: 0.1378 - loss: 1.0124[1m 9/26[0m [32m━━━━━━[0m[37m━━━━━━━━━━━━━━[0m [1m25s[0m 1s/step - accuracy: 0.8348 - iou_score: 0.1411 - loss: 1.0114[1m10/26[0m [32m━━━━━━━[0m[37m━━━━━━━━━━━━━[0m [1m24s[0m 2s/step - accuracy: 0.8431 - iou_score: 0.1441 - loss: 1.0105[1m11/26[0m [32m━━━━━━━━[0m[37m━━━━━━━━━━━━[0m [1m23s[0m 2s/step - accuracy: 0.8502 - iou_score: 0.1470 - loss: 1.0095[1m12/26[0m [32m━━━━━━━━━[0m[37m━━━━━━━━━━━[0m [1m21s[0m 2s/step - accuracy: 0.8565 - iou_score: 0.1497 - loss: 1.0086[1m13/26[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m20s[0m 2s/step - accuracy: 0.8620 - iou_score: 0.1524 - loss: 1.0077[1m14/26[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m18s[0m 2s/step - accuracy: 0.8669 - iou_score: 0.1549 - loss: 1.0069[1m15/26[0m [32m━━━━━━━━━━━[0m[37m━━━━━━━━━[0m [1m17s[0m 2s/step - accuracy: 0.8713 - iou_score: 0.1573 - loss: 1.0060[1m16/26[0m [32m━━━━━━━━━━━━[0m[37m━━━━━━━━[0m [1m15s[0m 2s/step - accuracy: 0.8752 - iou_score: 0.1596 - loss: 1.0051[1m17/26[0m [32m━━━━━━━━━━━━━[0m[37m━━━━━━━[0m [1m14s[0m 2s/step - accuracy: 0.8787 - iou_score: 0.1617 - loss: 1.0043[1m18/26[0m [32m━━━━━━━━━━━━━[0m[37m━━━━━━━[0m [1m12s[0m 2s/step - accuracy: 0.8819 - iou_score: 0.1638 - loss: 1.0034[1m19/26[0m [32m━━━━━━━━━━━━━━[0m[37m━━━━━━[0m [1m11s[0m 2s/step - accuracy: 0.8848 - iou_score: 0.1657 - loss: 1.0026[1m20/26[0m [32m━━━━━━━━━━━━━━━[0m[37m━━━━━[0m [1m9s[0m 2s/step - accuracy: 0.8875 - iou_score: 0.1675 - loss: 1.0018 [1m21/26[0m [32m━━━━━━━━━━━━━━━━[0m[37m━━━━[0m [1m8s[0m 2s/step - accuracy: 0.8900 - iou_score: 0.1692 - loss: 1.0010[1m22/26[0m [32m━━━━━━━━━━━━━━━━[0m[37m━━━━[0m [1m6s[0m 2s/step - accuracy: 0.8923 - iou_score: 0.1709 - loss: 1.0003[1m23/26[0m [32m━━━━━━━━━━━━━━━━━[0m[37m━━━[0m [1m4s[0m 2s/step - accuracy: 0.8945 - iou_score: 0.1724 - loss: 0.9995[1m24/26[0m [32m━━━━━━━━━━━━━━━━━━[0m[37m━━[0m [1m3s[0m 2s/step - accuracy: 0.8965 - iou_score: 0.1739 - loss: 0.9987[1m25/26[0m [32m━━━━━━━━━━━━━━━━━━━[0m[37m━[0m [1m1s[0m 2s/step - accuracy: 0.8984 - iou_score: 0.1754 - loss: 0.9980[1m26/26[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 2s/step - accuracy: 0.9001 - iou_score: 0.1767 - loss: 0.9973[1m26/26[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m77s[0m 2s/step - accuracy: 0.9017 - iou_score: 0.1780 - loss: 0.9966 - val_accuracy: 0.9555 - val_iou_score: 0.2418 - val_loss: 0.9498
2025-08-08 11:44:04.967987: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng20{k2=6,k3=0} for conv (f32[16,4,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[4,4,128,128,128]{4,3,2,1,0}, f32[4,16,128,128,128]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBackwardFilter", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kNone","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
2025-08-08 11:44:04.981200: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 1.0141455s
Trying algorithm eng20{k2=6,k3=0} for conv (f32[16,4,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[4,4,128,128,128]{4,3,2,1,0}, f32[4,16,128,128,128]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBackwardFilter", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kNone","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...

Training finished.
Best Epoch (val_loss): 1
Training Duration: 77.64 seconds
Finished training model with modalities: [0, 2, 3]
Training model with modalities: [0, 1, 2, 3]
Images shape: (4, 128, 128, 128, 4)
Masks shape: (4, 128, 128, 128, 4)
[1m 1/26[0m [37m━━━━━━━━━━━━━━━━━━━━[0m [1m9:58[0m 24s/step - accuracy: 0.1144 - iou_score: 9.2213e-06 - loss: 1.0369[1m 2/26[0m [32m━[0m[37m━━━━━━━━━━━━━━━━━━━[0m [1m32s[0m 1s/step - accuracy: 0.2373 - iou_score: 1.9298e-05 - loss: 1.0341  [1m 3/26[0m [32m━━[0m[37m━━━━━━━━━━━━━━━━━━[0m [1m42s[0m 2s/step - accuracy: 0.3212 - iou_score: 0.0056 - loss: 1.0309    [1m 4/26[0m [32m━━━[0m[37m━━━━━━━━━━━━━━━━━[0m [1m43s[0m 2s/step - accuracy: 0.3849 - iou_score: 0.0186 - loss: 1.0281[1m 5/26[0m [32m━━━[0m[37m━━━━━━━━━━━━━━━━━[0m [1m39s[0m 2s/step - accuracy: 0.4376 - iou_score: 0.0307 - loss: 1.0257[1m 6/26[0m [32m━━━━[0m[37m━━━━━━━━━━━━━━━━[0m [1m36s[0m 2s/step - accuracy: 0.4812 - iou_score: 0.0409 - loss: 1.0236[1m 7/26[0m [32m━━━━━[0m[37m━━━━━━━━━━━━━━━[0m [1m34s[0m 2s/step - accuracy: 0.5177 - iou_score: 0.0499 - loss: 1.0217[1m 8/26[0m [32m━━━━━━[0m[37m━━━━━━━━━━━━━━[0m [1m32s[0m 2s/step - accuracy: 0.5486 - iou_score: 0.0587 - loss: 1.0202[1m 9/26[0m [32m━━━━━━[0m[37m━━━━━━━━━━━━━━[0m [1m31s[0m 2s/step - accuracy: 0.5749 - iou_score: 0.0662 - loss: 1.0188[1m10/26[0m [32m━━━━━━━[0m[37m━━━━━━━━━━━━━[0m [1m29s[0m 2s/step - accuracy: 0.5977 - iou_score: 0.0726 - loss: 1.0175[1m11/26[0m [32m━━━━━━━━[0m[37m━━━━━━━━━━━━[0m [1m27s[0m 2s/step - accuracy: 0.6178 - iou_score: 0.0783 - loss: 1.0163[1m12/26[0m [32m━━━━━━━━━[0m[37m━━━━━━━━━━━[0m [1m25s[0m 2s/step - accuracy: 0.6354 - iou_score: 0.0837 - loss: 1.0152[1m13/26[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m22s[0m 2s/step - accuracy: 0.6512 - iou_score: 0.0888 - loss: 1.0142[1m14/26[0m [32m━━━━━━━━━━[0m[37m━━━━━━━━━━[0m [1m20s[0m 2s/step - accuracy: 0.6653 - iou_score: 0.0935 - loss: 1.0132[1m15/26[0m [32m━━━━━━━━━━━[0m[37m━━━━━━━━━[0m [1m19s[0m 2s/step - accuracy: 0.6781 - iou_score: 0.0980 - loss: 1.0122[1m16/26[0m [32m━━━━━━━━━━━━[0m[37m━━━━━━━━[0m [1m17s[0m 2s/step - accuracy: 0.6896 - iou_score: 0.1022 - loss: 1.0113[1m17/26[0m [32m━━━━━━━━━━━━━[0m[37m━━━━━━━[0m [1m15s[0m 2s/step - accuracy: 0.7000 - iou_score: 0.1061 - loss: 1.0105[1m18/26[0m [32m━━━━━━━━━━━━━[0m[37m━━━━━━━[0m [1m14s[0m 2s/step - accuracy: 0.7096 - iou_score: 0.1098 - loss: 1.0096[1m19/26[0m [32m━━━━━━━━━━━━━━[0m[37m━━━━━━[0m [1m12s[0m 2s/step - accuracy: 0.7184 - iou_score: 0.1132 - loss: 1.0088[1m20/26[0m [32m━━━━━━━━━━━━━━━[0m[37m━━━━━[0m [1m10s[0m 2s/step - accuracy: 0.7266 - iou_score: 0.1165 - loss: 1.0081[1m21/26[0m [32m━━━━━━━━━━━━━━━━[0m[37m━━━━[0m [1m8s[0m 2s/step - accuracy: 0.7342 - iou_score: 0.1197 - loss: 1.0073 [1m22/26[0m [32m━━━━━━━━━━━━━━━━[0m[37m━━━━[0m [1m7s[0m 2s/step - accuracy: 0.7412 - iou_score: 0.1226 - loss: 1.0066[1m23/26[0m [32m━━━━━━━━━━━━━━━━━[0m[37m━━━[0m [1m5s[0m 2s/step - accuracy: 0.7478 - iou_score: 0.1254 - loss: 1.0058[1m24/26[0m [32m━━━━━━━━━━━━━━━━━━[0m[37m━━[0m [1m3s[0m 2s/step - accuracy: 0.7539 - iou_score: 0.1281 - loss: 1.0051[1m25/26[0m [32m━━━━━━━━━━━━━━━━━━━[0m[37m━[0m [1m1s[0m 2s/step - accuracy: 0.7596 - iou_score: 0.1307 - loss: 1.00432025-08-08 11:45:06.706993: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng20{k2=6,k3=0} for conv (f32[16,4,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[2,4,128,128,128]{4,3,2,1,0}, f32[2,16,128,128,128]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBackwardFilter", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kNone","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
2025-08-08 11:45:06.709848: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 1.01355051s
Trying algorithm eng20{k2=6,k3=0} for conv (f32[16,4,3,3,3]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[2,4,128,128,128]{4,3,2,1,0}, f32[2,16,128,128,128]{4,3,2,1,0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBackwardFilter", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kNone","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
[1m26/26[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 2s/step - accuracy: 0.7650 - iou_score: 0.1331 - loss: 1.0036[1m26/26[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m92s[0m 3s/step - accuracy: 0.7699 - iou_score: 0.1353 - loss: 1.0030 - val_accuracy: 0.9544 - val_iou_score: 0.2376 - val_loss: 0.9602
2025-08-08 11:45:30.963991: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng0{} for conv (f32[8,16,128,128,128]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[8,16,128,128,128]{4,3,2,1,0}, f32[16,16,3,3,3]{4,3,2,1,0}, f32[16]{0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBiasActivationForward", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kRelu","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
2025-08-08 11:45:32.989479: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 3.025831164s
Trying algorithm eng0{} for conv (f32[8,16,128,128,128]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[8,16,128,128,128]{4,3,2,1,0}, f32[16,16,3,3,3]{4,3,2,1,0}, f32[16]{0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBiasActivationForward", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kRelu","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
2025-08-08 11:45:37.527985: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng11{k2=4,k3=0} for conv (f32[8,16,128,128,128]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[8,32,128,128,128]{4,3,2,1,0}, f32[16,32,3,3,3]{4,3,2,1,0}, f32[16]{0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBiasActivationForward", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kRelu","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
2025-08-08 11:45:37.636108: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 1.109091974s
Trying algorithm eng11{k2=4,k3=0} for conv (f32[8,16,128,128,128]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[8,32,128,128,128]{4,3,2,1,0}, f32[16,32,3,3,3]{4,3,2,1,0}, f32[16]{0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBiasActivationForward", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kRelu","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
2025-08-08 11:45:38.657986: E external/local_xla/xla/service/slow_operation_alarm.cc:65] Trying algorithm eng0{} for conv (f32[8,16,128,128,128]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[8,32,128,128,128]{4,3,2,1,0}, f32[16,32,3,3,3]{4,3,2,1,0}, f32[16]{0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBiasActivationForward", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kRelu","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...
2025-08-08 11:45:43.684441: E external/local_xla/xla/service/slow_operation_alarm.cc:133] The operation took 6.027137654s
Trying algorithm eng0{} for conv (f32[8,16,128,128,128]{4,3,2,1,0}, u8[0]{0}) custom-call(f32[8,32,128,128,128]{4,3,2,1,0}, f32[16,32,3,3,3]{4,3,2,1,0}, f32[16]{0}), window={size=3x3x3 pad=1_1x1_1x1_1}, dim_labels=bf012_oi012->bf012, custom_call_target="__cudnn$convBiasActivationForward", backend_config={"operation_queue_id":"0","wait_on_operation_queues":[],"cudnn_conv_backend_config":{"activation_mode":"kRelu","conv_result_scale":1,"side_input_scale":0,"leakyrelu_alpha":0}} is taking a while...

Training finished.
Best Epoch (val_loss): 1
Training Duration: 93.61 seconds
Finished training model with modalities: [0, 1, 2, 3]

Loading model: model_1_2.keras
Using modality indices: [1, 2]
[1m1/1[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 18s/step[1m1/1[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m18s[0m 18s/step
Mean IoU: 0.2386

Loading model: model_1_2_3.keras
Using modality indices: [1, 2, 3]
[1m1/1[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 3s/step[1m1/1[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m3s[0m 3s/step
Mean IoU: 0.2386

Loading model: model_0_1_2.keras
Using modality indices: [0, 1, 2]
[1m1/1[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 1s/step[1m1/1[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m1s[0m 1s/step
Mean IoU: 0.2387

Loading model: model_3.keras
Using modality indices: [3]
[1m1/1[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 2s/step[1m1/1[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m2s[0m 2s/step
WARNING:tensorflow:5 out of the last 5 calls to <function TensorFlowTrainer.make_predict_function.<locals>.one_step_on_data_distributed at 0x14b7f4427740> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
Mean IoU: 0.2386

Loading model: model_2.keras
Using modality indices: [2]
[1m1/1[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 1s/step[1m1/1[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m1s[0m 1s/step
WARNING:tensorflow:6 out of the last 6 calls to <function TensorFlowTrainer.make_predict_function.<locals>.one_step_on_data_distributed at 0x14b7f41b7b00> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
Mean IoU: 0.2386

Loading model: model_0_2_3.keras
Using modality indices: [0, 2, 3]
[1m1/1[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 1s/step[1m1/1[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m1s[0m 1s/step
Mean IoU: 0.2497

Loading model: model_2_3.keras
Using modality indices: [2, 3]
[1m1/1[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 1s/step[1m1/1[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m1s[0m 1s/step
Mean IoU: 0.2386

Loading model: model_0_1_2_3.keras
Using modality indices: [0, 1, 2, 3]
[1m1/1[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 3s/step[1m1/1[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m3s[0m 3s/step
Mean IoU: 0.2386
  Average Accuracy: 0.9544

Best model: model_0_1_2_3.keras with Mean IoU: 0.2386
Model with Best Average Accuracy: model_0_1_2_3.keras with Average Accuracy: 0.9544 )
Randomly selected patient for visualization: UPENN-GBM-00249_11
Visualizing slice 83 for UPENN-GBM-00249_11

Loading model: model_0_1_2.keras
[1m1/1[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 4s/step[1m1/1[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m4s[0m 4s/step

Loading model: model_0_1_2_3.keras
[1m1/1[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 1s/step[1m1/1[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m1s[0m 1s/step

Loading model: model_0_2_3.keras
[1m1/1[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 601ms/step[1m1/1[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m1s[0m 604ms/step

Loading model: model_1_2.keras
[1m1/1[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 971ms/step[1m1/1[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m1s[0m 974ms/step

Loading model: model_1_2_3.keras
[1m1/1[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 603ms/step[1m1/1[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m1s[0m 606ms/step

Loading model: model_2.keras
[1m1/1[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 883ms/step[1m1/1[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m1s[0m 886ms/step

Loading model: model_2_3.keras
[1m1/1[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 601ms/step[1m1/1[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m1s[0m 604ms/step

Loading model: model_3.keras
[1m1/1[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 597ms/step[1m1/1[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m1s[0m 600ms/step

Saved side-by-side visualisation to: results/all_models_prediction_UPENN-GBM-00249_11_slice83.png
